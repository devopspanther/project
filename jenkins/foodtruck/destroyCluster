/*
IaC :: Destroy Foodtruck Cluster
This Jenkinsfile destroys a Foodtruck cluster (Production, Staging and User)
Parameters needed:
  - envScenario: "production", "staging" or "user"
  - iacRegion: "us-west-1", "us-east-1"
*/

pipeline {
  agent { label 'jenkins-slave' }
  environment { 
    IMAGE = "757687274468.dkr.ecr.us-west-1.amazonaws.com/foodtruck:latest"
    REGISTRY = "757687274468.dkr.ecr.us-west-1.amazonaws.com"
  }
  stages {
    stage ('Set Env Vars') {
      steps {
        script {
          sh /* AWS ECR Auth */ '''aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin $REGISTRY'''
          docker.image("$IMAGE").inside {
            wrap([$class: 'BuildUser']) {
              env.TF_ENV = "foodtruck"
              env.HOSTED_ZONE = "Z2KBAPVGPRZ50I"
              env.BASE_URL = "dsolab.net"
              env.ALB_CIDRS = "142\\.112\\.83\\.2/32\\,34\\.198\\.218\\.0/24\\,174\\.142\\.184\\.242/32\\,\
              68\\.182\\.135\\.114/32\\,3\\.213\\.79\\.176/32\\,34\\.206\\.230\\.175/32\\,52\\.203\\.223\\.215/32\\,\
              54\\.83\\.74\\.180/32\\,50\\.18\\.7\\.122/32\\,\
              54\\.215\\.42\\.139/32\\,54\\.176\\.183\\.169/32\\,52\\.9\\.247\\.205/32\\,13\\.52\\.57\\.234/32\\,54\\.215\\.89\\.193/32\\,54\\.241\\.120\\.37/32\\,54\\.215\\.215\\.163/32\\,\
              52\\.72\\.241\\.9/32\\,54\\.224\\.12\\.14/32\\,3\\.235\\.200\\.176/32\\,54\\.236\\.137\\.48/32\\,44\\.193\\.242\\.133/32\\,50\\.19\\.60\\.117/32\\,54\\.144\\.188\\.226/32" /* Line 4: EIP Pool of CIDRs (us-west-1); Line 5: EIP Pool of CIDRs (us-east-1)*/
              env.TLS_CERT = "s3://foodtruck-storage/dsolab.crt"
              env.TLS_KEY = "s3://foodtruck-storage/dsolab.key"
              env.TF_BUCKET = "foodtruck-tfstates"
              env.SC_SDE_USER = sh(script: "aws secretsmanager get-secret-value --region us-east-1 --secret-id production/docker/sc_dsolab --output text --query \"SecretString\" | cut -d':' -f1 | tr -d '\"{['", returnStdout: true).trim()
              env.SC_SDE_PASS = sh(script: "aws secretsmanager get-secret-value --region us-east-1 --secret-id production/docker/sc_dsolab --output text --query \"SecretString\" | cut -d':' -f2 | tr -d '\"}]'", returnStdout: true).trim()
              env.DOCKERUSER = sh(script: "aws secretsmanager get-secret-value --region us-east-1 --secret-id production/dsolabs/dockerhub --output text --query \"SecretString\" | cut -d':' -f1 | tr -d '\"{['", returnStdout: true).trim()
              env.DOCKERPASS = sh(script: "aws secretsmanager get-secret-value --region us-east-1 --secret-id production/dsolabs/dockerhub --output text --query \"SecretString\" | cut -d':' -f2 | tr -d '\"}]'", returnStdout: true).trim()
              if ("us-east-1".equals(iacRegion)) {
                env.AWS_REGION = "us-east-1"
                env.AWS_DEFAULT_REGION = "us-east-1"
                env.TF_VAR_region = "us-east-1"
                env.SSL_CERT_ARN = "arn:aws:acm:us-east-1:757687274468:certificate/f5b34366-54c1-4814-bd9b-6a9a650238d9"
              } else {
                env.AWS_REGION = "us-west-1"
                env.AWS_DEFAULT_REGION = "us-west-1"
                env.TF_VAR_region = "us-west-1"
                env.SSL_CERT_ARN = "arn:aws:acm:us-west-1:757687274468:certificate/32c28b40-f546-49f3-b9e2-2af17fd70c84"
              }
              if ("production".equals(envName)) {
                env.TF_VAR_prefix_user = "production"
                env.TF_CLI_ARGS_init = "-backend-config='key=production/foodtruck-v1.tfstate'"
              } else if ("staging".equals(envName)) {
                env.TF_VAR_prefix_user = "staging"
                env.TF_CLI_ARGS_init = "-backend-config='key=staging/foodtruck-v1.tfstate'"
              } else if ("prod-dso".equals(envName)) { 
                env.TF_VAR_prefix_user = "prod-dso"
                env.TF_CLI_ARGS_init = "-backend-config='key=prod-dso/foodtruck-v1.tfstate'"
              } else {
                env.TF_VAR_prefix_user = sh(script: "echo ${BUILD_USER_ID} | cut -d@ -f 1", returnStdout: true).trim()
                env.TF_CLI_ARGS_init = sh(script: "echo -backend-config='key=${TF_VAR_prefix_user}/foodtruck-v1.tfstate'", returnStdout: true).trim()
              }
              sh /* Save our env variables to file and Stash files as well */ '''declare -p -x > ./envVars'''
              stash includes: 'envVars', name: 'envVars'
            }
          }
        }
      }      
    }
    stage ('IaC - Destroy') {
      steps {
        script {
          sh /* AWS ECR Auth */ '''aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin $REGISTRY'''
          docker.image("$IMAGE").inside {
            unstash 'envVars'
            sh /* Import env vars */ '''. ./envVars'''
            sh /* Run Ansible IaC Playbook */ '''ansible-playbook ./foodtruck-v1/foodtruck-v1.yml --tags destroy'''
          }
        }
      }
    }
  }
  post {
    success {
      emailext body: "Cluster ${env.TF_VAR_prefix_user}.${env.BASE_URL} destroyed",
      mimeType: 'text/html',
      subject: "[Jenkins] destroyCluster deployed -Status: Success",
      recipientProviders: [developers(), requestor()]
    }
    unstable {
      emailext body: "Cluster ${env.TF_VAR_prefix_user}.${env.BASE_URL} destroyed with errors.",
      mimeType: 'text/html',
      subject: "[Jenkins] destroyCluster deployed -Status: Unstable",
      recipientProviders: [developers(), requestor()]
    }
    failure {
      emailext body: "Cluster ${env.TF_VAR_prefix_user}.${env.BASE_URL} wasn't able to be destroyed, check logs on Jenkins for more details.",
      mimeType: 'text/html',
      subject: "[Jenkins] destroyCluster failed",
      recipientProviders: [developers(), requestor()]
    }
    always {
      cleanWs(cleanWhenNotBuilt: true, deleteDirs: true)
    }
  }
}
